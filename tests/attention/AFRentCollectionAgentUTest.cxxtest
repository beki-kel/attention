#include <cxxtest/TestSuite.h>
#include <opencog/attentionbank/bank/AttentionBank.h>
#include <opencog/attention/AFRentCollectionAgent.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/cogserver/server/CogServer.h>
#include <opencog/util/Logger.h>
#include <opencog/util/Config.h>
#include <opencog/cogserver/modules/agents/AgentsModule.h>
#include <opencog/attentionbank/types/atom_types.h>
#include <opencog/attention/AttentionParamQuery.h>
#include <chrono>
#include <thread>
#include <iostream>

using namespace opencog;

class AFRentCollectionAgentTest: public CxxTest::TestSuite
{
private:
    AtomSpace* as;
    CogServer* cogServer;
    Scheduler* scheduler;
    AFRentCollectionAgent* afRentCollectionAgent;
    AttentionParamQuery* atq;
    AttentionBank* attentionBank;

public:
    void setUp(){
        cogServer = &cogserver();
        config().set("MODULES", "opencog/attention/libattention.so");
        cogServer->loadModules();
        config().set("MODULES", "libagents.so");

        Module* amod = cogServer->getModule("opencog::AgentsModule");
        AgentsModule* agmod = static_cast<AgentsModule*>(amod);
        scheduler = &agmod->get_scheduler();

        as = &cogserver().getAtomSpace();
        attentionBank = &attentionbank(as);
        afRentCollectionAgent= new AFRentCollectionAgent(*cogServer);

        atq = new AttentionParamQuery(as);
        AbstractFactory<Agent>* afRentCollectionAgentFactory = new Factory<AFRentCollectionAgent, Agent>();
        scheduler->registerAgent(AFRentCollectionAgent::info().id, afRentCollectionAgentFactory);

        std::cout << "Setup completed for AFRentCollectionAgentTest." << std::endl;
    }

    void tearDown(){
        delete afRentCollectionAgent;
        delete atq;
        cogServer->stop();
        std::cout << "Setup completed for AFRentCollectionAgentTest." << std::endl;
    }

    // Test for ensuring correct parameter retrieval from AttentionParamQuery
    void testAttentionParamQueryDefaults(){

        double rent_update_freq = std::stod(atq->get_param_value(AttentionParamQuery::af_rent_update_freq));

        std::cout << "af_rent_update_freq: " << rent_update_freq << std::endl;
        
        TS_ASSERT_EQUALS(rent_update_freq ,5);
    }

void testRunAgent() {
    Handle source = as->add_node(CONCEPT_NODE, "Source");
    Handle target1 = as->add_node(CONCEPT_NODE, "Target1");
    Handle target2 = as->add_node(CONCEPT_NODE, "Target2");
    Handle target3 = as->add_node(CONCEPT_NODE, "Target3");

    std::cout << "Atoms created" << std::endl;

    // Stimulate the atoms to bring them into the attentional focus
    AttentionBank& ab = attentionbank(as);
    ab.stimulate(source, 2);
    ab.stimulate(target1, 1);
    ab.stimulate(target2, 3);
    ab.stimulate(target3, 4);

    std::cout << "Atoms stimulated." << std::endl;

    // Print initial STI values
    std::cout << "The STI of source is: " << get_sti(source) << std::endl;
    std::cout << "The STI of target 1 is: " << get_sti(target1) << std::endl;
    std::cout << "The STI of target 2 is: " << get_sti(target2) << std::endl;
    std::cout << "The STI of target 3 is: " << get_sti(target3) << std::endl;

    // Retrieve targets into a HandleSeq
    HandleSeq targetSet;
    
    // Debug output before calling selectTargets
    std::cout << "Calling selectTargets to populate targetSet." << std::endl;
    
    afRentCollectionAgent->selectTargets(targetSet);

    // Check if targetSet is empty
    if (targetSet.empty()) {
        std::cout << "No targets were selected; targetSet is empty." << std::endl;
        return; // Exit early or handle as needed
    } else {
        std::cout << "Targets selected: " << targetSet.size() << std::endl;
        for (const auto& handle : targetSet) {
            // Assuming Handle has an overloaded operator<< for printing
            std::cout << "Selected Target Handle: " << handle << std::endl; 
        }
    }

    // Call collectRent with the retrieved targets
    afRentCollectionAgent->collectRent(targetSet);

    std::this_thread::sleep_for(std::chrono::seconds(2)); // Sleep for 2 seconds

    // Run again to see updated values after rent collection
    afRentCollectionAgent->collectRent(targetSet);
    afRentCollectionAgent->collectRent(targetSet);
    afRentCollectionAgent->collectRent(targetSet);
    afRentCollectionAgent->collectRent(targetSet);
    afRentCollectionAgent->collectRent(targetSet);

    // Print updated STI values
    std::cout << "Updated STI values after collectRent:" << std::endl;
    std::cout << "The STI of source is: " << get_sti(source) << std::endl;
    std::cout << "The STI of target 1 is: " << get_sti(target1) << std::endl;
    std::cout << "The STI of target 2 is: " << get_sti(target2) << std::endl;
    std::cout << "The STI of target 3 is: " << get_sti(target3) << std::endl;
    TS_ASSERT_EQUALS(1, 2); // This assertion seems placeholder; adjust as needed.
}
};